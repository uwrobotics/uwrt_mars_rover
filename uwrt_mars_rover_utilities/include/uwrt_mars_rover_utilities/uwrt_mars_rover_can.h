/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.3 Thu Feb  3 12:34:29 2022.
 */

#ifndef UWRT_MARS_ROVER_CAN_H
#define UWRT_MARS_ROVER_CAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifndef EINVAL
#define EINVAL 22
#endif

/* Frame ids. */
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_FRAME_ID               (0x621u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_FRAME_ID             (0x622u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_FRAME_ID     (0x623u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_FRAME_ID              (0x624u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_FRAME_ID           (0x625u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_FRAME_ID          (0x640u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_FRAME_ID  (0x641u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_FRAME_ID           (0x642u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_FRAME_ID                  (0x643u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_FRAME_ID                     (0x644u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_DIAGNOSTICS_FRAME_ID             (0x645u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_FRAME_ID         (0x646u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_FRAME_ID           (0x660u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_FRAME_ID         (0x661u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_ANGULAR_VELOCITY_FRAME_ID (0x662u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_FRAME_ID       (0x663u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_FRAME_ID          (0x680u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_SENSOR_DATA_FRAME_ID         (0x681u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_FRAME_ID              (0x682u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_FRAME_ID                 (0x683u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_DIAGNOSTICS_FRAME_ID         (0x684u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_FRAME_ID            (0x6a0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_FRAME_ID          (0x6a1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_ANGULAR_VELOCITY_FRAME_ID  (0x6a2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_FRAME_ID        (0x6a3u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_JOINT_DATA_FRAME_ID           (0x6c0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_FRAME_ID               (0x6c1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_FRAME_ID                  (0x6c2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_DIAGNOSTICS_FRAME_ID          (0x6c3u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_FRAME_ID                 (0x6e0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_FRAME_ID             (0x700u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_FRAME_ID                  (0x701u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_FRAME_ID                     (0x702u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_DIAGNOSTICS_FRAME_ID             (0x703u)
#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_FRAME_ID              (0x720u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE1_FRAME_ID              (0x721u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE2_FRAME_ID              (0x722u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_FRAME_ID              (0x723u)

/* Frame lengths in bytes. */
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_LENGTH               (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_LENGTH             (8u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_LENGTH     (8u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_LENGTH              (8u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_LENGTH           (8u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_LENGTH          (8u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_LENGTH  (8u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_LENGTH           (8u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_LENGTH                  (7u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_LENGTH                     (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_DIAGNOSTICS_LENGTH             (8u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_LENGTH         (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_LENGTH           (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_LENGTH         (8u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_ANGULAR_VELOCITY_LENGTH (4u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_LENGTH       (8u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_LENGTH          (8u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_SENSOR_DATA_LENGTH         (32u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_LENGTH              (5u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_LENGTH                 (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_DIAGNOSTICS_LENGTH         (8u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_LENGTH            (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_LENGTH          (6u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_ANGULAR_VELOCITY_LENGTH  (2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_LENGTH        (8u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_JOINT_DATA_LENGTH           (4u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_LENGTH               (5u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_LENGTH                  (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_DIAGNOSTICS_LENGTH          (8u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_LENGTH                 (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_LENGTH             (8u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_LENGTH                  (6u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_LENGTH                     (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_DIAGNOSTICS_LENGTH             (8u)
#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_LENGTH              (1u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE1_LENGTH              (4u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE2_LENGTH              (1u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_LENGTH              (1u)

/* Extended or standard frame types. */
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_IS_EXTENDED               (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_IS_EXTENDED             (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_IS_EXTENDED     (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_IS_EXTENDED              (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_IS_EXTENDED           (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_IS_EXTENDED          (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_IS_EXTENDED  (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_IS_EXTENDED           (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_IS_EXTENDED                  (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_IS_EXTENDED                     (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_DIAGNOSTICS_IS_EXTENDED             (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_IS_EXTENDED         (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_IS_EXTENDED           (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_IS_EXTENDED         (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_ANGULAR_VELOCITY_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_IS_EXTENDED       (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_IS_EXTENDED          (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_SENSOR_DATA_IS_EXTENDED         (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_IS_EXTENDED              (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_IS_EXTENDED                 (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_DIAGNOSTICS_IS_EXTENDED         (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_IS_EXTENDED            (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_IS_EXTENDED          (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_ANGULAR_VELOCITY_IS_EXTENDED  (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_IS_EXTENDED        (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_JOINT_DATA_IS_EXTENDED           (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_IS_EXTENDED               (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_IS_EXTENDED                  (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_DIAGNOSTICS_IS_EXTENDED          (0)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_IS_EXTENDED                 (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_IS_EXTENDED             (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_IS_EXTENDED                  (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_IS_EXTENDED                     (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_DIAGNOSTICS_IS_EXTENDED             (0)
#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_IS_EXTENDED              (0)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE1_IS_EXTENDED              (0)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE2_IS_EXTENDED              (0)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_IS_EXTENDED              (0)

/* Frame cycle times in milliseconds. */

/* Signal choices. */
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_CURRENT_CHOICE   (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_SNA_CHOICE       (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_TURNTABLE_POSITION_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_SHOULDER_POSITION_SNA_CHOICE (1023u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_ELBOW_POSITION_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_LEFT_WRIST_POSITION_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_RIGHT_WRIST_POSITION_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_CLAW_POSITION_SNA_CHOICE (127)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_POSITION_ARM_SET_TOOL_TIP_POSITION_SNA_CHOICE (127u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_TURNTABLE_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_SHOULDER_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_ELBOW_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_LEFT_WRIST_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_RIGHT_WRIST_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_ANGULAR_VELOCITY_ARM_SET_CLAW_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_TURNTABLE_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_SHOULDER_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_ELBOW_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_LEFT_WRIST_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_RIGHT_WRIST_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_CURRENT_ARM_SET_CLAW_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_TURNTABLE_CHOICE   (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_SHOULDER_CHOICE    (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_ELBOW_CHOICE       (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_LEFT_WRIST_CHOICE  (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_RIGHT_WRIST_CHOICE (4u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_CLAW_CHOICE        (5u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PIDID_SNA_CHOICE         (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PID_PROPORTIONAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PID_INTEGRAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PID_DERIVATIVE_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_PID_PARAMS_ARM_JOINT_PID_DEADZONE_SNA_CHOICE (8191u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_TURNTABLE_POSITION_SNA_CHOICE (4095)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_SHOULDER_POSITION_SNA_CHOICE (4095u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_ELBOW_POSITION_SNA_CHOICE (4095)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_LEFT_WRIST_POSITION_SNA_CHOICE (255)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_RIGHT_WRIST_POSITION_SNA_CHOICE (255)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_POSITION_ARM_REPORT_CLAW_POSITION_SNA_CHOICE (255)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_TURNTABLE_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_SHOULDER_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_ELBOW_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_LEFT_WRIST_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_RIGHT_WRIST_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_ANGULAR_VELOCITY_ARM_REPORT_CLAW_ANGULAR_VELOCITY_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_TURNTABLE_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_SHOULDER_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_ELBOW_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_LEFT_WRIST_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_RIGHT_WRIST_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_JOINT_CURRENT_ARM_REPORT_CLAW_CURRENT_SNA_CHOICE (1023)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_RESET_ACK_CHOICE                (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_CONTROL_MODE_ACK_CHOICE     (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_JOINT_PID_PARAMS_ACK_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_CAN_BUS_SWITCH_ACK_CHOICE           (3u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_SNA_CHOICE                          (255u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_TURNTABLE_CHOICE   (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_SHOULDER_CHOICE    (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_ELBOW_CHOICE       (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_LEFT_WRIST_CHOICE  (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_RIGHT_WRIST_CHOICE (4u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_CLAW_CHOICE        (5u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_SAFETY_CHECK_JOINT_ID_SNA_CHOICE         (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_CURRENT_CHECK_OFF_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_CURRENT_CHECK_ON_CHOICE  (1u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_ANGULAR_VELOCITY_CHECK_OFF_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_ANGULAR_VELOCITY_CHECK_ON_CHOICE  (1u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_LIMIT_SWITCH_CHECK_OFF_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_JOINT_SAFETY_CHECK_ARM_JOINT_LIMIT_SWITCH_CHECK_ON_CHOICE  (1u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_SNA_CHOICE       (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_SNA_CHOICE       (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_SCIENCE_SET_GENEVA_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_SCIENCE_SET_ELEVATOR_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_SCIENCE_SET_COVER_POSITION_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_POSITION_SCIENCE_SET_SHOVEL_POSITION_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_ANGULAR_VELOCITY_SCIENCE_SET_GENEVA_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_ANGULAR_VELOCITY_SCIENCE_SET_ELEVATOR_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PIDID_GENEVA_CHOICE   (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PIDID_ELEVATOR_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PIDID_SNA_CHOICE      (7u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PID_PROPORTIONAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PID_INTEGRAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PID_DERIVATIVE_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_JOINT_PID_PARAMS_SCIENCE_JOINT_PID_DEADZONE_SNA_CHOICE (8191u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_SCIENCE_REPORT_GENEVA_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_SCIENCE_REPORT_ELEVATOR_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_SCIENCE_REPORT_GENEVA_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_JOINT_DATA_SCIENCE_REPORT_ELEVATOR_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_SENSOR_DATA_SCIENCE_MOISTURE_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_SENSOR_DATA_SCIENCE_TEMPERATURE_DATA_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_SCIENCE_SET_CONTROL_MODE_ACK_CHOICE     (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_SCIENCE_SET_JOINT_PID_PARAMS_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_CAN_BUS_SWITCH_ACK_CHOICE               (2u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_SNA_CHOICE                              (255u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_POSITION_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_VELOCITY_CHOICE  (2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_SNA_CHOICE       (3u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_GIMBAL_SET_PAN_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_GIMBAL_SET_PITCH_POSITION_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_POSITION_GIMBAL_SET_ROLL_POSITION_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_ANGULAR_VELOCITY_GIMBAL_SET_PAN_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PIDID_PAN_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PIDID_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PID_PROPORTIONAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PID_INTEGRAL_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PID_DERIVATIVE_GAIN_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_JOINT_PID_PARAMS_GIMBAL_JOINT_PID_DEADZONE_SNA_CHOICE (8191u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_JOINT_DATA_GIMBAL_REPORT_PAN_POSITION_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_JOINT_DATA_GIMBAL_REPORT_PAN_ANGULAR_VELOCITY_SNA_CHOICE (32767)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_GIMBAL_SET_CONTROL_MODE_ACK_CHOICE     (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_GIMBAL_SET_JOINT_PID_PARAMS_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_CAN_BUS_SWITCH_ACK_CHOICE              (2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_SNA_CHOICE                             (255u)

#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SOLID_RED_CHOICE      (0u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SOLID_BLUE_CHOICE     (1u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_FLASHING_GREEN_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_FALSE_CHOICE          (3u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SNA_CHOICE            (7u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_PDB_ULTRASONIC_SENSOR1_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_PDB_ULTRASONIC_SENSOR2_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_PDB_ULTRASONIC_SENSOR3_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_SENSOR_DATA_PDB_ULTRASONIC_SENSOR4_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_FAULT_CHOICE       (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_SNA_CHOICE         (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_OPERATIONAL_CHOICE  (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_OVERVOLTAGE_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_SNA_CHOICE          (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_OPERATIONAL_CHOICE  (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_OVERVOLTAGE_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_SNA_CHOICE          (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_OPERATIONAL_CHOICE  (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_OVERVOLTAGE_CHOICE  (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_SNA_CHOICE          (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_PDB_SET_LED_MATRIX_ACK_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_CAN_BUS_SWITCH_ACK_CHOICE     (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_SNA_CHOICE                    (255u)

#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_COMMON_CAN_BUS_ID_CAN_BUS_1_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_COMMON_CAN_BUS_ID_CAN_BUS_2_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_COMMON_SWITCH_CAN_BUS_COMMON_CAN_BUS_ID_SNA_CHOICE       (3u)

#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_0_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_1_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_2_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_3_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_4_CHOICE (4u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_5_CHOICE (5u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_6_CHOICE (6u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_DEBUG_VALUE_7_CHOICE (7u)
#define UWRT_MARS_ROVER_CAN_COMMON_DEBUG_MESSAGE3_COMMON_DEBUG_SIGNAL3_SNA_CHOICE           (255u)

/**
 * Signals in message ARM_setControlMode.
 *
 * Set control mode for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_control_mode_t {
  /**
   * Arm turntable control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_turntable_control_mode;

  /**
   * Arm shoulder control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_shoulder_control_mode;

  /**
   * Arm elbow control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_elbow_control_mode;

  /**
   * Arm left wrist control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_left_wrist_control_mode;

  /**
   * Arm right wrist control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_right_wrist_control_mode;

  /**
   * Arm claw control mode
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_claw_control_mode;
};

/**
 * Signals in message ARM_setJointPosition.
 *
 * Set position data for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_joint_position_t {
  /**
   * Arm set turntable position data
   *
   * Range: -511.0000000000000045543672014..511.0000000000000045543672014 (-1.5708..1.5708 rad)
   * Scale: 0.003073972602739726
   * Offset: 0.0
   */
  int16_t arm_set_turntable_position;

  /**
   * Arm set shoulder position data
   *
   * Range: 0..1022.000000000000064607157522 (0.0..3.14159 rad)
   * Scale: 0.0030739628180039137
   * Offset: 0.0
   */
  uint16_t arm_set_shoulder_position;

  /**
   * Arm set elbow position data
   *
   * Range: -511.0000000000000045543672014..511.0000000000000045543672014 (-1.5708..1.5708 rad)
   * Scale: 0.003073972602739726
   * Offset: 0.0
   */
  int16_t arm_set_elbow_position;

  /**
   * Arm set left wrist position data
   *
   * Range: -511.0000000000000045543672014..511.0000000000000045543672014 (-1.5708..1.5708 rad)
   * Scale: 0.003073972602739726
   * Offset: 0.0
   */
  int16_t arm_set_left_wrist_position;

  /**
   * Arm set right wrist position data
   *
   * Range: -511.0000000000000045543672014..511.0000000000000045543672014 (-1.5708..1.5708 rad)
   * Scale: 0.003073972602739726
   * Offset: 0.0
   */
  int16_t arm_set_right_wrist_position;

  /**
   * Arm set claw position data
   *
   * Range: -63.00000000000000842245989305..63.00000000000000842245989305 (-1.5708..1.5708 rad)
   * Scale: 0.02493333333333333
   * Offset: 0.0
   */
  int8_t arm_set_claw_position;

  /**
   * Arm set tool tip position data
   *
   * Range: 0..125.9999999999999911764425020 (0..3.14159 rad)
   * Scale: 0.02493325396825397
   * Offset: 0
   */
  uint8_t arm_set_tool_tip_position;
};

/**
 * Signals in message ARM_setJointAngularVelocity.
 *
 * Set velocity data for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_joint_angular_velocity_t {
  /**
   * Arm set turntable angular velocity
   *
   * Range: -510.9999999999999951455000000..510.9999999999999951455000000 (-0.6..0.6 rad/s)
   * Scale: 0.0011741682974559687
   * Offset: 0.0
   */
  int16_t arm_set_turntable_angular_velocity;

  /**
   * Arm set shoulder angular velocity
   *
   * Range: -510.9999999999999690334000000..510.9999999999999690334000000 (-0.05..0.05 rad/s)
   * Scale: 9.784735812133073e-05
   * Offset: 0.0
   */
  int16_t arm_set_shoulder_angular_velocity;

  /**
   * Arm set elbow angular velocity
   *
   * Range: -510.9999999999999806387777778..510.9999999999999806387777778 (-1.8..1.8 rad/s)
   * Scale: 0.0035225048923679062
   * Offset: 0.0
   */
  int16_t arm_set_elbow_angular_velocity;

  /**
   * Arm set left wrist angular velocity
   *
   * Range: -510.9999999999999933066197183..510.9999999999999933066197183 (-7.1..7.1 rad/s)
   * Scale: 0.013894324853228963
   * Offset: 0.0
   */
  int16_t arm_set_left_wrist_angular_velocity;

  /**
   * Arm set right wrist angular velocity
   *
   * Range: -510.9999999999999933066197183..510.9999999999999933066197183 (-7.1..7.1 rad/s)
   * Scale: 0.013894324853228963
   * Offset: 0.0
   */
  int16_t arm_set_right_wrist_angular_velocity;

  /**
   * Arm set claw angular velocity
   *
   * Range: -511.0000000000000386656666667..511.0000000000000386656666667 (-30.0..30.0 rad/s)
   * Scale: 0.05870841487279843
   * Offset: 0.0
   */
  int16_t arm_set_claw_angular_velocity;
};

/**
 * Signals in message ARM_setJointCurrent.
 *
 * Set current data for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_joint_current_t {
  /**
   * Arm set turntable current
   *
   * Range: -511.0000000000000370233962264..511.0000000000000370233962264 (-53.0..53.0 A)
   * Scale: 0.10371819960861056
   * Offset: 0.0
   */
  int16_t arm_set_turntable_current;

  /**
   * Arm set shoulder current
   *
   * Range: -511.0000000000000212576000000..511.0000000000000212576000000 (-5.0..5.0 A)
   * Scale: 0.009784735812133072
   * Offset: 0.0
   */
  int16_t arm_set_shoulder_current;

  /**
   * Arm set elbow current
   *
   * Range: -511.0000000000000212576000000..511.0000000000000212576000000 (-25.0..25.0 A)
   * Scale: 0.04892367906066536
   * Offset: 0.0
   */
  int16_t arm_set_elbow_current;

  /**
   * Arm set left wrist current
   *
   * Range: -511.0000000000000307529090909..511.0000000000000307529090909 (-5.5..5.5 A)
   * Scale: 0.010763209393346379
   * Offset: 0.0
   */
  int16_t arm_set_left_wrist_current;

  /**
   * Arm set right wrist current
   *
   * Range: -511.0000000000000307529090909..511.0000000000000307529090909 (-5.5..5.5 A)
   * Scale: 0.010763209393346379
   * Offset: 0.0
   */
  int16_t arm_set_right_wrist_current;

  /**
   * Arm set claw current
   *
   * Range: -511.0000000000000386656666667..511.0000000000000386656666667 (-3.0..3.0 A)
   * Scale: 0.005870841487279843
   * Offset: 0.0
   */
  int16_t arm_set_claw_current;
};

/**
 * Signals in message ARM_setJointPIDParams.
 *
 * Set arm joint PID parameters
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_joint_pid_params_t {
  /**
   * Arm joint ID
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_joint_pidid;

  /**
   * Arm joint PID proportional gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t arm_joint_pid_proportional_gain;

  /**
   * Arm joint PID integral gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t arm_joint_pid_integral_gain;

  /**
   * Arm joint PID derivative gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t arm_joint_pid_derivative_gain;

  /**
   * Arm joint PID deadzone
   *
   * Range: 0..8190.000000000000008190000000 (0.0..100.0 -)
   * Scale: 0.01221001221001221
   * Offset: 0.0
   */
  uint16_t arm_joint_pid_deadzone;
};

/**
 * Signals in message ARM_reportJointPosition.
 *
 * Arm report joint position data
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_joint_position_t {
  /**
   * Arm turntable position
   *
   * Range: -2047.000000000000059293672014..2047.000000000000059293672014 (-1.5708..1.5708 rad)
   * Scale: 0.0007673668783585735
   * Offset: 0.0
   */
  int16_t arm_report_turntable_position;

  /**
   * Arm shoulder position
   *
   * Range: 0..4093.999999999999817296719177 (0.0..3.14159 rad)
   * Scale: 0.0007673644357596483
   * Offset: 0.0
   */
  uint16_t arm_report_shoulder_position;

  /**
   * Arm elbow position
   *
   * Range: -2047.000000000000059293672014..2047.000000000000059293672014 (-1.5708..1.5708 rad)
   * Scale: 0.0007673668783585735
   * Offset: 0.0
   */
  int16_t arm_report_elbow_position;

  /**
   * Arm left wrist position
   *
   * Range: -127.0000000000000001617010441..127.0000000000000001617010441 (-1.5708..1.5708 rad)
   * Scale: 0.012368503937007874
   * Offset: 0.0
   */
  int8_t arm_report_left_wrist_position;

  /**
   * Arm right wrist position
   *
   * Range: -127.0000000000000001617010441..127.0000000000000001617010441 (-1.5708..1.5708 rad)
   * Scale: 0.012368503937007874
   * Offset: 0.0
   */
  int8_t arm_report_right_wrist_position;

  /**
   * Arm claw position
   *
   * Range: -127.0000000000000001617010441..127.0000000000000001617010441 (-1.5708..1.5708 rad)
   * Scale: 0.012368503937007874
   * Offset: 0.0
   */
  int8_t arm_report_claw_position;
};

/**
 * Signals in message ARM_reportJointAngularVelocity.
 *
 * Arm report joint angular velocity data
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_joint_angular_velocity_t {
  /**
   * Arm turntable angular velocity
   *
   * Range: -510.9999999999999951455000000..510.9999999999999951455000000 (-0.6..0.6 rad)
   * Scale: 0.0011741682974559687
   * Offset: 0.0
   */
  int16_t arm_report_turntable_angular_velocity;

  /**
   * Arm shoulder angular velocity
   *
   * Range: -510.9999999999999690334000000..510.9999999999999690334000000 (-0.05..0.05 rad)
   * Scale: 9.784735812133073e-05
   * Offset: 0.0
   */
  int16_t arm_report_shoulder_angular_velocity;

  /**
   * Arm elbow angular velocity
   *
   * Range: -510.9999999999999806387777778..510.9999999999999806387777778 (-1.8..1.8 rad)
   * Scale: 0.0035225048923679062
   * Offset: 0.0
   */
  int16_t arm_report_elbow_angular_velocity;

  /**
   * Arm left wrist angular velocity
   *
   * Range: -510.9999999999999933066197183..510.9999999999999933066197183 (-7.1..7.1 rad)
   * Scale: 0.013894324853228963
   * Offset: 0.0
   */
  int16_t arm_report_left_wrist_angular_velocity;

  /**
   * Arm right wrist angular velocity
   *
   * Range: -510.9999999999999933066197183..510.9999999999999933066197183 (-7.1..7.1 rad)
   * Scale: 0.013894324853228963
   * Offset: 0.0
   */
  int16_t arm_report_right_wrist_angular_velocity;

  /**
   * Arm claw angular velocity
   *
   * Range: -511.0000000000000386656666667..511.0000000000000386656666667 (-30.0..30.0 rad)
   * Scale: 0.05870841487279843
   * Offset: 0.0
   */
  int16_t arm_report_claw_angular_velocity;
};

/**
 * Signals in message ARM_reportJointCurrent.
 *
 * Arm report joint angular current
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_joint_current_t {
  /**
   * Arm turntable current
   *
   * Range: -511.0000000000000370233962264..511.0000000000000370233962264 (-53.0..53.0 rad)
   * Scale: 0.10371819960861056
   * Offset: 0.0
   */
  int16_t arm_report_turntable_current;

  /**
   * Arm shoulder current
   *
   * Range: -511.0000000000000212576000000..511.0000000000000212576000000 (-5.0..5.0 rad)
   * Scale: 0.009784735812133072
   * Offset: 0.0
   */
  int16_t arm_report_shoulder_current;

  /**
   * Arm elbow current
   *
   * Range: -511.0000000000000212576000000..511.0000000000000212576000000 (-25.0..25.0 rad)
   * Scale: 0.04892367906066536
   * Offset: 0.0
   */
  int16_t arm_report_elbow_current;

  /**
   * Arm left wrist current
   *
   * Range: -511.0000000000000307529090909..511.0000000000000307529090909 (-5.5..5.5 rad)
   * Scale: 0.010763209393346379
   * Offset: 0.0
   */
  int16_t arm_report_left_wrist_current;

  /**
   * Arm right wrist current
   *
   * Range: -511.0000000000000307529090909..511.0000000000000307529090909 (-5.5..5.5 rad)
   * Scale: 0.010763209393346379
   * Offset: 0.0
   */
  int16_t arm_report_right_wrist_current;

  /**
   * Arm claw current
   *
   * Range: -511.0000000000000386656666667..511.0000000000000386656666667 (-3.0..3.0 rad)
   * Scale: 0.005870841487279843
   * Offset: 0.0
   */
  int16_t arm_report_claw_current;
};

/**
 * Signals in message ARM_reportFaults.
 *
 * Arm fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_faults_t {
  /**
   * Arm turntable encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_turntable_encoder_state;

  /**
   * Arm turntable current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_turntable_current_sensor_state;

  /**
   * Arm shoulder encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_shoulder_encoder_state;

  /**
   * Arm shoulder current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_shoulder_current_sensor_state;

  /**
   * Arm elbow encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_elbow_encoder_state;

  /**
   * Arm elbow current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_elbow_current_sensor_state;

  /**
   * Arm left wrist encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_left_wrist_encoder_state;

  /**
   * Arm left wrist current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_left_wrist_current_sensor_state;

  /**
   * Arm right wrist encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_right_wrist_encoder_state;

  /**
   * Arm shoulder current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_right_wrist_current_sensor_state;

  /**
   * Arm claw encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_claw_encoder_state;

  /**
   * Arm claw current sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_claw_current_sensor_state;

  /**
   * Arm number of CAN RX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t arm_num_canrx_faults;

  /**
   * Arm number of CAN TX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t arm_num_cantx_faults;
};

/**
 * Signals in message ARM_reportACK.
 *
 * Arm report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_ack_t {
  /**
   * Arm ACKs
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_ack;
};

/**
 * Signals in message ARM_reportDiagnostics.
 *
 * Arm report diagnostic information
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_diagnostics_t {
  /**
   * Arm report number of streamed CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t arm_report_num_streamed_msgs_received;

  /**
   * Arm report number of one-shot CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t arm_report_num_one_shot_msgs_received;
};

/**
 * Signals in message ARM_setJointSafetyCheck.
 *
 * Set current limit, angular velocity limit, and limit switch safety checks for an arm joint
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_joint_safety_check_t {
  /**
   * The joint ID
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_safety_check_joint_id;

  /**
   * Whether or not to activate current check for this joint
   *
   * Range: 0..0 (0.0..0.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_joint_current_check;

  /**
   * Whether or not to activate angular velocity check for this joint
   *
   * Range: 0..0 (0.0..0.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_joint_angular_velocity_check;

  /**
   * Whether or not to activate limit switch check for this joint
   *
   * Range: 0..0 (0.0..0.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t arm_joint_limit_switch_check;
};

/**
 * Signals in message SCIENCE_setControlMode.
 *
 * Set control mode for science joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_set_control_mode_t {
  /**
   * Science geneva mechanism control mode
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_geneva_control_mode;

  /**
   * Science elevator control mode
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_elevator_control_mode;
};

/**
 * Signals in message SCIENCE_setJointPosition.
 *
 * Science set joint position
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_set_joint_position_t {
  /**
   * Set science geneva mechanism position
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_set_geneva_position;

  /**
   * Set science elevator position
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_set_elevator_position;

  /**
   * Set science cover position
   *
   * Range: 0..65533.99999999999955484466146 (0.0..3.14159 rad)
   * Scale: 4.793832209234901e-05
   * Offset: 0.0
   */
  uint16_t science_set_cover_position;

  /**
   * Set science shovel position
   *
   * Range: 0..65533.99999999999955484466146 (0.0..3.14159 rad)
   * Scale: 4.793832209234901e-05
   * Offset: 0.0
   */
  uint16_t science_set_shovel_position;
};

/**
 * Signals in message SCIENCE_setJointAngularVelocity.
 *
 * Science set joint angular velocity
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_set_joint_angular_velocity_t {
  /**
   * Science set geneva mechanism angular velocity
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad/s)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_set_geneva_angular_velocity;

  /**
   * Science set elevator angular velocity
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad/s)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_set_elevator_angular_velocity;
};

/**
 * Signals in message SCIENCE_setJointPIDParams.
 *
 * Set science joint PID parameters
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_set_joint_pid_params_t {
  /**
   * Science joint ID
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_joint_pidid;

  /**
   * Science joint PID proportional gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t science_joint_pid_proportional_gain;

  /**
   * Science joint PID integral gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t science_joint_pid_integral_gain;

  /**
   * Science joint PID derivative gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t science_joint_pid_derivative_gain;

  /**
   * Science joint PID deadzone
   *
   * Range: 0..8190.000000000000008190000000 (0.0..100.0 -)
   * Scale: 0.01221001221001221
   * Offset: 0.0
   */
  uint16_t science_joint_pid_deadzone;
};

/**
 * Signals in message SCIENCE_reportJointData.
 *
 * Science report joint positions and angular velocities
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_joint_data_t {
  /**
   * Science report geneva mechanism position
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_report_geneva_position;

  /**
   * Science report elevator position
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_report_elevator_position;

  /**
   * Science report geneva mechanism angular velocity
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad/s)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_report_geneva_angular_velocity;

  /**
   * Science report elevator angular velocity
   *
   * Range: -32767.00000000000246637209000..32767.00000000000246637209000 (-10.0..10.0 rad/s)
   * Scale: 0.0003051850947599719
   * Offset: 0.0
   */
  int16_t science_report_elevator_angular_velocity;
};

/**
 * Signals in message SCIENCE_reportSensorData.
 *
 * Science report sensor data
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_sensor_data_t {
  /**
   * Science moisture sensor data
   *
   * Range: 0..65534.00000000000063803902400 (0.0..100.0 -)
   * Scale: 0.0015259254737998596
   * Offset: 0.0
   */
  uint16_t science_moisture_data;

  /**
   * Science temperature sensor data
   *
   * Range: -32767.00000000000031901951200..32767.00000000000031901951200 (-50.0..100.0 Celsius)
   * Scale: 0.0022888882106997894
   * Offset: 25.0
   */
  int16_t science_temperature_data;
};

/**
 * Signals in message SCIENCE_reportFaults.
 *
 * Science fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_faults_t {
  /**
   * Science geneva mechanism encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_geneva_encoder_state;

  /**
   * Science elevator encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_elevator_encoder_state;

  /**
   * Science moisture sensor state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_moisture_sensor_state;

  /**
   * Science number of CAN RX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t science_num_canrx_faults;

  /**
   * Science number of CAN TX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t science_num_cantx_faults;
};

/**
 * Signals in message SCIENCE_reportACK.
 *
 * Science report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_ack_t {
  /**
   * Science ACKs
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t science_ack;
};

/**
 * Signals in message SCIENCE_reportDiagnostics.
 *
 * Science report diagnostic information
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_diagnostics_t {
  /**
   * Science report number of streamed CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t science_report_num_streamed_msgs_received;

  /**
   * Science report number of one-shot CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t science_report_num_one_shot_msgs_received;
};

/**
 * Signals in message GIMBAL_setControlMode.
 *
 * Set control mode for gimbal joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_set_control_mode_t {
  /**
   * Gimbal pan control mode
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t gimbal_pan_control_mode;
};

/**
 * Signals in message GIMBAL_setJointPosition.
 *
 * Gimbal set joint position
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_set_joint_position_t {
  /**
   * Gimbal set pan position
   *
   * Range: -32767.00000000000067691160833..32767.00000000000067691160833 (-12.0..12.0 rad)
   * Scale: 0.0003662221137119663
   * Offset: 0.0
   */
  int16_t gimbal_set_pan_position;

  /**
   * Gimbal set pitch position
   *
   * Range: 0..65533.99999999999955484466146 (0.0..3.14159 rad)
   * Scale: 4.793832209234901e-05
   * Offset: 0.0
   */
  uint16_t gimbal_set_pitch_position;

  /**
   * Gimbal set roll position
   *
   * Range: 0..65533.99999999999955484466146 (0.0..3.14159 rad)
   * Scale: 4.793832209234901e-05
   * Offset: 0.0
   */
  uint16_t gimbal_set_roll_position;
};

/**
 * Signals in message GIMBAL_setJointAngularVelocity.
 *
 * Gimbal set joint angular velocity
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_t {
  /**
   * Gimbal set pan angular velocity
   *
   * Range: -32767.00000000000067691160833..32767.00000000000067691160833 (-6.0..6.0 rad/s)
   * Scale: 0.00018311105685598315
   * Offset: 0.0
   */
  int16_t gimbal_set_pan_angular_velocity;
};

/**
 * Signals in message GIMBAL_setJointPIDParams.
 *
 * Set gimbal joint PID parameters
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_set_joint_pid_params_t {
  /**
   * Gimbal joint ID
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t gimbal_joint_pidid;

  /**
   * Gimbal joint PID proportional gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t gimbal_joint_pid_proportional_gain;

  /**
   * Gimbal joint PID integral gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t gimbal_joint_pid_integral_gain;

  /**
   * Gimbal joint PID derivative gain
   *
   * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
   * Scale: 0.15259254737998595
   * Offset: 0.0
   */
  uint16_t gimbal_joint_pid_derivative_gain;

  /**
   * Gimbal joint PID deadzone
   *
   * Range: 0..8190.000000000000008190000000 (0.0..100.0 -)
   * Scale: 0.01221001221001221
   * Offset: 0.0
   */
  uint16_t gimbal_joint_pid_deadzone;
};

/**
 * Signals in message GIMBAL_reportJointData.
 *
 * Gimbal report joint data
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_joint_data_t {
  /**
   * Gimbal report pan position
   *
   * Range: -32767.00000000000067691160833..32767.00000000000067691160833 (-12.0..12.0 rad)
   * Scale: 0.0003662221137119663
   * Offset: 0.0
   */
  int16_t gimbal_report_pan_position;

  /**
   * Gimbal report pan angular velocity
   *
   * Range: -32767.00000000000067691160833..32767.00000000000067691160833 (-6.0..6.0 rad/s)
   * Scale: 0.00018311105685598315
   * Offset: 0.0
   */
  int16_t gimbal_report_pan_angular_velocity;
};

/**
 * Signals in message GIMBAL_reportFaults.
 *
 * Gimbal fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_faults_t {
  /**
   * Gimbal pan encoder state
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t gimbal_pan_encoder_state;

  /**
   * Gimbal number of CAN RX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t gimbal_num_canrx_faults;

  /**
   * Gimbal number of CAN TX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t gimbal_num_cantx_faults;
};

/**
 * Signals in message GIMBAL_reportACK.
 *
 * Gimbal report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_ack_t {
  /**
   * Gimbal ACKs
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t gimbal_ack;
};

/**
 * Signals in message GIMBAL_reportDiagnostics.
 *
 * Gimbal report diagnostic information
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_diagnostics_t {
  /**
   * Gimbal report number of streamed CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t gimbal_report_num_streamed_msgs_received;

  /**
   * Gimbal report number of one-shot CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t gimbal_report_num_one_shot_msgs_received;
};

/**
 * Signals in message PDB_setLEDMatrix.
 *
 * PDB set LED matrix state
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_set_led_matrix_t {
  /**
   * PDB LED matrix state
   *
   * Range: 0..6 (0.0..6.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_led_matrix_state;
};

/**
 * Signals in message PDB_reportSensorData.
 *
 * PDB report sensor data
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_sensor_data_t {
  /**
   * PDB ultrasonic sensor 1 data
   *
   * Range: 0..65534.00000000000063803902400 (0.0..500.0 m)
   * Scale: 0.007629627368999298
   * Offset: 0.0
   */
  uint16_t pdb_ultrasonic_sensor1_data;

  /**
   * PDB ultrasonic sensor 2 data
   *
   * Range: 0..65534.00000000000063803902400 (0.0..500.0 m)
   * Scale: 0.007629627368999298
   * Offset: 0.0
   */
  uint16_t pdb_ultrasonic_sensor2_data;

  /**
   * PDB ultrasonic sensor 3 data
   *
   * Range: 0..65534.00000000000063803902400 (0.0..500.0 m)
   * Scale: 0.007629627368999298
   * Offset: 0.0
   */
  uint16_t pdb_ultrasonic_sensor3_data;

  /**
   * PDB ultrasonic sensor 4 data
   *
   * Range: 0..65534.00000000000063803902400 (0.0..500.0 m)
   * Scale: 0.007629627368999298
   * Offset: 0.0
   */
  uint16_t pdb_ultrasonic_sensor4_data;
};

/**
 * Signals in message PDB_reportFaults.
 *
 * PDB report fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_faults_t {
  /**
   * PDB Jetson power status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_jetson_status;

  /**
   * PDB arm power status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_arm_power_status;

  /**
   * PDB science power status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_science_power_status;

  /**
   * PDB gmibal power status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_gimbal_power_status;

  /**
   * PDB VBAT rail status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_vbat_rail_status;

  /**
   * PDB 17V rail status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_17_v_rail_status;

  /**
   * PDB 5V rail status
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_5_v_rail_status;

  /**
   * PDB number of CAN RX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t pdb_num_canrx_faults;

  /**
   * PDB number of CAN TX faults
   *
   * Range: 0..65534 (0.0..65534.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint16_t pdb_num_cantx_faults;
};

/**
 * Signals in message PDB_reportACK.
 *
 * PDB report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_ack_t {
  /**
   * PDB ACKs
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t pdb_ack;
};

/**
 * Signals in message PDB_reportDiagnostics.
 *
 * PDB report diagnostic information
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_diagnostics_t {
  /**
   * PDB report number of streamed CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t pdb_report_num_streamed_msgs_received;

  /**
   * PDB report number of one-shot CAN messages received
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t pdb_report_num_one_shot_msgs_received;
};

/**
 * Signals in message COMMON_switchCANBus.
 *
 * Notifies all boards to switch to the specified CAN bus in the dual-bus system
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_common_switch_can_bus_t {
  /**
   * CAN bus ID
   *
   * Range: 0..2 (0.0..2.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t common_can_bus_id;
};

/**
 * Signals in message COMMON_debugMessage1.
 *
 * CAN message for debugging or placeholder purposes
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_common_debug_message1_t {
  /**
   * CAN debug signal
   *
   * Range: 0..4294967294 (0.0..4294967294.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint32_t common_debug_signal1;
};

/**
 * Signals in message COMMON_debugMessage2.
 *
 * CAN message for debugging or placeholder purposes
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_common_debug_message2_t {
  /**
   * CAN debug signal
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t common_debug_signal2;
};

/**
 * Signals in message COMMON_debugMessage3.
 *
 * CAN message for debugging or placeholder purposes
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_common_debug_message3_t {
  /**
   * CAN debug signal
   *
   * Range: 0..254 (0.0..254.0 -)
   * Scale: 1.0
   * Offset: 0.0
   */
  uint8_t common_debug_signal3;
};

/**
 * Pack message ARM_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_control_mode_pack(uint8_t *dst_p,
                                                  const struct uwrt_mars_rover_can_arm_set_control_mode_t *src_p,
                                                  size_t size);

/**
 * Unpack message ARM_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_control_mode_unpack(struct uwrt_mars_rover_can_arm_set_control_mode_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_is_in_range(uint8_t value);

/**
 * Pack message ARM_setJointPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_position_pack(uint8_t *dst_p,
                                                    const struct uwrt_mars_rover_can_arm_set_joint_position_t *src_p,
                                                    size_t size);

/**
 * Unpack message ARM_setJointPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_position_unpack(struct uwrt_mars_rover_can_arm_set_joint_position_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_turntable_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_turntable_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_turntable_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_shoulder_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_shoulder_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_shoulder_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_elbow_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_elbow_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_elbow_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_left_wrist_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_left_wrist_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_left_wrist_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_right_wrist_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_right_wrist_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_right_wrist_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_claw_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_claw_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_claw_position_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_position_arm_set_tool_tip_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_position_arm_set_tool_tip_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_position_arm_set_tool_tip_position_is_in_range(uint8_t value);

/**
 * Pack message ARM_setJointAngularVelocity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_angular_velocity_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_set_joint_angular_velocity_t *src_p, size_t size);

/**
 * Unpack message ARM_setJointAngularVelocity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_angular_velocity_unpack(
    struct uwrt_mars_rover_can_arm_set_joint_angular_velocity_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_turntable_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_turntable_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_turntable_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_shoulder_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_shoulder_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_shoulder_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_elbow_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_elbow_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_elbow_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_left_wrist_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_left_wrist_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_left_wrist_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_right_wrist_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_right_wrist_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_right_wrist_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_claw_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_claw_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_angular_velocity_arm_set_claw_angular_velocity_is_in_range(int16_t value);

/**
 * Pack message ARM_setJointCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_current_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_arm_set_joint_current_t *src_p,
                                                   size_t size);

/**
 * Unpack message ARM_setJointCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_current_unpack(struct uwrt_mars_rover_can_arm_set_joint_current_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_turntable_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_turntable_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_turntable_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_shoulder_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_shoulder_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_shoulder_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_elbow_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_elbow_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_elbow_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_left_wrist_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_left_wrist_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_left_wrist_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_right_wrist_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_right_wrist_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_right_wrist_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_set_joint_current_arm_set_claw_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_current_arm_set_claw_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_current_arm_set_claw_current_is_in_range(int16_t value);

/**
 * Pack message ARM_setJointPIDParams.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_pid_params_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_set_joint_pid_params_t *src_p, size_t size);

/**
 * Unpack message ARM_setJointPIDParams.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_pid_params_unpack(struct uwrt_mars_rover_can_arm_set_joint_pid_params_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pidid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pidid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pidid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_proportional_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_proportional_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_proportional_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_integral_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_integral_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_integral_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_derivative_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_derivative_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_derivative_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_deadzone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_deadzone_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_pid_params_arm_joint_pid_deadzone_is_in_range(uint16_t value);

/**
 * Pack message ARM_reportJointPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_position_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_report_joint_position_t *src_p, size_t size);

/**
 * Unpack message ARM_reportJointPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_position_unpack(struct uwrt_mars_rover_can_arm_report_joint_position_t *dst_p,
                                                         const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_turntable_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_turntable_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_turntable_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_shoulder_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_shoulder_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_shoulder_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_elbow_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_elbow_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_elbow_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_left_wrist_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_left_wrist_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_left_wrist_position_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_right_wrist_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_right_wrist_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_right_wrist_position_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t uwrt_mars_rover_can_arm_report_joint_position_arm_report_claw_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_position_arm_report_claw_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_position_arm_report_claw_position_is_in_range(int8_t value);

/**
 * Pack message ARM_reportJointAngularVelocity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_angular_velocity_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_report_joint_angular_velocity_t *src_p, size_t size);

/**
 * Unpack message ARM_reportJointAngularVelocity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_angular_velocity_unpack(
    struct uwrt_mars_rover_can_arm_report_joint_angular_velocity_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_turntable_angular_velocity_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_turntable_angular_velocity_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_turntable_angular_velocity_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_shoulder_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_shoulder_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_shoulder_angular_velocity_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_elbow_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_elbow_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_elbow_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_left_wrist_angular_velocity_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_left_wrist_angular_velocity_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_left_wrist_angular_velocity_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_right_wrist_angular_velocity_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_right_wrist_angular_velocity_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_right_wrist_angular_velocity_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_claw_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_claw_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_angular_velocity_arm_report_claw_angular_velocity_is_in_range(int16_t value);

/**
 * Pack message ARM_reportJointCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_current_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_report_joint_current_t *src_p, size_t size);

/**
 * Unpack message ARM_reportJointCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_joint_current_unpack(struct uwrt_mars_rover_can_arm_report_joint_current_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_turntable_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_turntable_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_turntable_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_shoulder_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_shoulder_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_shoulder_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_elbow_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_elbow_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_elbow_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_left_wrist_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_left_wrist_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_left_wrist_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_right_wrist_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_right_wrist_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_right_wrist_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_arm_report_joint_current_arm_report_claw_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_joint_current_arm_report_claw_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_joint_current_arm_report_claw_current_is_in_range(int16_t value);

/**
 * Pack message ARM_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_faults_pack(uint8_t *dst_p,
                                               const struct uwrt_mars_rover_can_arm_report_faults_t *src_p,
                                               size_t size);

/**
 * Unpack message ARM_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_faults_unpack(struct uwrt_mars_rover_can_arm_report_faults_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_report_faults_arm_num_canrx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_num_canrx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_num_canrx_faults_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_report_faults_arm_num_cantx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_num_cantx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_num_cantx_faults_is_in_range(uint16_t value);

/**
 * Pack message ARM_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_ack_pack(uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_report_ack_t *src_p,
                                            size_t size);

/**
 * Unpack message ARM_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_ack_unpack(struct uwrt_mars_rover_can_arm_report_ack_t *dst_p, const uint8_t *src_p,
                                              size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_ack_arm_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_ack_arm_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_ack_arm_ack_is_in_range(uint8_t value);

/**
 * Pack message ARM_reportDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_diagnostics_pack(uint8_t *dst_p,
                                                    const struct uwrt_mars_rover_can_arm_report_diagnostics_t *src_p,
                                                    size_t size);

/**
 * Unpack message ARM_reportDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_diagnostics_unpack(struct uwrt_mars_rover_can_arm_report_diagnostics_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_streamed_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_streamed_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_streamed_msgs_received_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_one_shot_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_one_shot_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_diagnostics_arm_report_num_one_shot_msgs_received_is_in_range(uint32_t value);

/**
 * Pack message ARM_setJointSafetyCheck.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_safety_check_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_arm_set_joint_safety_check_t *src_p, size_t size);

/**
 * Unpack message ARM_setJointSafetyCheck.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_joint_safety_check_unpack(
    struct uwrt_mars_rover_can_arm_set_joint_safety_check_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_safety_check_arm_safety_check_joint_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_safety_check_arm_safety_check_joint_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_safety_check_arm_safety_check_joint_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_current_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_current_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_current_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_angular_velocity_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_angular_velocity_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_angular_velocity_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_limit_switch_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_limit_switch_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_joint_safety_check_arm_joint_limit_switch_check_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_set_control_mode_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_set_control_mode_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_set_control_mode_unpack(struct uwrt_mars_rover_can_science_set_control_mode_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_setJointPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_position_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_set_joint_position_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_setJointPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_position_unpack(
    struct uwrt_mars_rover_can_science_set_joint_position_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_set_joint_position_science_set_geneva_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_position_science_set_geneva_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_position_science_set_geneva_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_set_joint_position_science_set_elevator_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_position_science_set_elevator_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_position_science_set_elevator_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_position_science_set_cover_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_position_science_set_cover_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_position_science_set_cover_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_position_science_set_shovel_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_position_science_set_shovel_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_position_science_set_shovel_position_is_in_range(uint16_t value);

/**
 * Pack message SCIENCE_setJointAngularVelocity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_angular_velocity_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_set_joint_angular_velocity_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_setJointAngularVelocity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_angular_velocity_unpack(
    struct uwrt_mars_rover_can_science_set_joint_angular_velocity_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_geneva_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_geneva_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_geneva_angular_velocity_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_elevator_angular_velocity_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_elevator_angular_velocity_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_angular_velocity_science_set_elevator_angular_velocity_is_in_range(
    int16_t value);

/**
 * Pack message SCIENCE_setJointPIDParams.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_pid_params_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_set_joint_pid_params_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_setJointPIDParams.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_set_joint_pid_params_unpack(
    struct uwrt_mars_rover_can_science_set_joint_pid_params_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pidid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pidid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pidid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_proportional_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_proportional_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_proportional_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_integral_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_integral_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_integral_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_derivative_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_derivative_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_derivative_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_deadzone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_deadzone_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_joint_pid_params_science_joint_pid_deadzone_is_in_range(uint16_t value);

/**
 * Pack message SCIENCE_reportJointData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_joint_data_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_report_joint_data_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_reportJointData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_joint_data_unpack(struct uwrt_mars_rover_can_science_report_joint_data_t *dst_p,
                                                         const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_joint_data_science_report_geneva_angular_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_joint_data_science_report_elevator_angular_velocity_is_in_range(int16_t value);

/**
 * Pack message SCIENCE_reportSensorData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_sensor_data_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_report_sensor_data_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_reportSensorData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_sensor_data_unpack(
    struct uwrt_mars_rover_can_science_report_sensor_data_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_report_sensor_data_science_moisture_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_sensor_data_science_moisture_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_sensor_data_science_moisture_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_science_report_sensor_data_science_temperature_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_sensor_data_science_temperature_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_sensor_data_science_temperature_data_is_in_range(int16_t value);

/**
 * Pack message SCIENCE_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_faults_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_science_report_faults_t *src_p,
                                                   size_t size);

/**
 * Unpack message SCIENCE_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_faults_unpack(struct uwrt_mars_rover_can_science_report_faults_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_report_faults_science_num_canrx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_num_canrx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_num_canrx_faults_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_science_report_faults_science_num_cantx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_num_cantx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_num_cantx_faults_is_in_range(uint16_t value);

/**
 * Pack message SCIENCE_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_ack_pack(uint8_t *dst_p,
                                                const struct uwrt_mars_rover_can_science_report_ack_t *src_p,
                                                size_t size);

/**
 * Unpack message SCIENCE_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_ack_unpack(struct uwrt_mars_rover_can_science_report_ack_t *dst_p,
                                                  const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_ack_science_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_ack_science_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_ack_science_ack_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_reportDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_diagnostics_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_science_report_diagnostics_t *src_p, size_t size);

/**
 * Unpack message SCIENCE_reportDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_diagnostics_unpack(
    struct uwrt_mars_rover_can_science_report_diagnostics_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_science_report_diagnostics_science_report_num_streamed_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_diagnostics_science_report_num_streamed_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_diagnostics_science_report_num_streamed_msgs_received_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_science_report_diagnostics_science_report_num_one_shot_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_diagnostics_science_report_num_one_shot_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_diagnostics_science_report_num_one_shot_msgs_received_is_in_range(
    uint32_t value);

/**
 * Pack message GIMBAL_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_control_mode_pack(uint8_t *dst_p,
                                                     const struct uwrt_mars_rover_can_gimbal_set_control_mode_t *src_p,
                                                     size_t size);

/**
 * Unpack message GIMBAL_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_control_mode_unpack(struct uwrt_mars_rover_can_gimbal_set_control_mode_t *dst_p,
                                                       const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_is_in_range(uint8_t value);

/**
 * Pack message GIMBAL_setJointPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_position_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_gimbal_set_joint_position_t *src_p, size_t size);

/**
 * Unpack message GIMBAL_setJointPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_position_unpack(struct uwrt_mars_rover_can_gimbal_set_joint_position_t *dst_p,
                                                         const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pan_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pan_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pan_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pitch_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pitch_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_pitch_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_roll_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_roll_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_position_gimbal_set_roll_position_is_in_range(uint16_t value);

/**
 * Pack message GIMBAL_setJointAngularVelocity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_t *src_p, size_t size);

/**
 * Unpack message GIMBAL_setJointAngularVelocity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_unpack(
    struct uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_gimbal_set_pan_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_gimbal_set_pan_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_angular_velocity_gimbal_set_pan_angular_velocity_is_in_range(int16_t value);

/**
 * Pack message GIMBAL_setJointPIDParams.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_pid_params_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_gimbal_set_joint_pid_params_t *src_p, size_t size);

/**
 * Unpack message GIMBAL_setJointPIDParams.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_joint_pid_params_unpack(
    struct uwrt_mars_rover_can_gimbal_set_joint_pid_params_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pidid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pidid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pidid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_proportional_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_proportional_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_proportional_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_integral_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_integral_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_integral_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_derivative_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_derivative_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_derivative_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_deadzone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_deadzone_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_joint_pid_params_gimbal_joint_pid_deadzone_is_in_range(uint16_t value);

/**
 * Pack message GIMBAL_reportJointData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_joint_data_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_gimbal_report_joint_data_t *src_p, size_t size);

/**
 * Unpack message GIMBAL_reportJointData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_joint_data_unpack(struct uwrt_mars_rover_can_gimbal_report_joint_data_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_angular_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_angular_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_joint_data_gimbal_report_pan_angular_velocity_is_in_range(int16_t value);

/**
 * Pack message GIMBAL_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_faults_pack(uint8_t *dst_p,
                                                  const struct uwrt_mars_rover_can_gimbal_report_faults_t *src_p,
                                                  size_t size);

/**
 * Unpack message GIMBAL_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_faults_unpack(struct uwrt_mars_rover_can_gimbal_report_faults_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_canrx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_canrx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_canrx_faults_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_cantx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_cantx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_faults_gimbal_num_cantx_faults_is_in_range(uint16_t value);

/**
 * Pack message GIMBAL_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_ack_pack(uint8_t *dst_p,
                                               const struct uwrt_mars_rover_can_gimbal_report_ack_t *src_p,
                                               size_t size);

/**
 * Unpack message GIMBAL_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_ack_unpack(struct uwrt_mars_rover_can_gimbal_report_ack_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_is_in_range(uint8_t value);

/**
 * Pack message GIMBAL_reportDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_diagnostics_pack(
    uint8_t *dst_p, const struct uwrt_mars_rover_can_gimbal_report_diagnostics_t *src_p, size_t size);

/**
 * Unpack message GIMBAL_reportDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_diagnostics_unpack(struct uwrt_mars_rover_can_gimbal_report_diagnostics_t *dst_p,
                                                         const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_streamed_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_streamed_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_streamed_msgs_received_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_one_shot_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_one_shot_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_diagnostics_gimbal_report_num_one_shot_msgs_received_is_in_range(uint32_t value);

/**
 * Pack message PDB_setLEDMatrix.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_set_led_matrix_pack(uint8_t *dst_p,
                                                const struct uwrt_mars_rover_can_pdb_set_led_matrix_t *src_p,
                                                size_t size);

/**
 * Unpack message PDB_setLEDMatrix.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_set_led_matrix_unpack(struct uwrt_mars_rover_can_pdb_set_led_matrix_t *dst_p,
                                                  const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_is_in_range(uint8_t value);

/**
 * Pack message PDB_reportSensorData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_sensor_data_pack(uint8_t *dst_p,
                                                    const struct uwrt_mars_rover_can_pdb_report_sensor_data_t *src_p,
                                                    size_t size);

/**
 * Unpack message PDB_reportSensorData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_sensor_data_unpack(struct uwrt_mars_rover_can_pdb_report_sensor_data_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor1_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor1_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor1_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor2_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor2_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor2_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor3_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor3_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor3_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor4_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor4_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_sensor_data_pdb_ultrasonic_sensor4_data_is_in_range(uint16_t value);

/**
 * Pack message PDB_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_faults_pack(uint8_t *dst_p,
                                               const struct uwrt_mars_rover_can_pdb_report_faults_t *src_p,
                                               size_t size);

/**
 * Unpack message PDB_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_faults_unpack(struct uwrt_mars_rover_can_pdb_report_faults_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_faults_pdb_num_canrx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_num_canrx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_num_canrx_faults_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_pdb_report_faults_pdb_num_cantx_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_num_cantx_faults_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_num_cantx_faults_is_in_range(uint16_t value);

/**
 * Pack message PDB_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_ack_pack(uint8_t *dst_p, const struct uwrt_mars_rover_can_pdb_report_ack_t *src_p,
                                            size_t size);

/**
 * Unpack message PDB_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_ack_unpack(struct uwrt_mars_rover_can_pdb_report_ack_t *dst_p, const uint8_t *src_p,
                                              size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_ack_pdb_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_ack_pdb_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_ack_pdb_ack_is_in_range(uint8_t value);

/**
 * Pack message PDB_reportDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_diagnostics_pack(uint8_t *dst_p,
                                                    const struct uwrt_mars_rover_can_pdb_report_diagnostics_t *src_p,
                                                    size_t size);

/**
 * Unpack message PDB_reportDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_diagnostics_unpack(struct uwrt_mars_rover_can_pdb_report_diagnostics_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_streamed_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_streamed_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_streamed_msgs_received_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_one_shot_msgs_received_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_one_shot_msgs_received_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_diagnostics_pdb_report_num_one_shot_msgs_received_is_in_range(uint32_t value);

/**
 * Pack message COMMON_switchCANBus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_common_switch_can_bus_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_common_switch_can_bus_t *src_p,
                                                   size_t size);

/**
 * Unpack message COMMON_switchCANBus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_common_switch_can_bus_unpack(struct uwrt_mars_rover_can_common_switch_can_bus_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_common_switch_can_bus_common_can_bus_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_common_switch_can_bus_common_can_bus_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_common_switch_can_bus_common_can_bus_id_is_in_range(uint8_t value);

/**
 * Pack message COMMON_debugMessage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message1_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_common_debug_message1_t *src_p,
                                                   size_t size);

/**
 * Unpack message COMMON_debugMessage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message1_unpack(struct uwrt_mars_rover_can_common_debug_message1_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t uwrt_mars_rover_can_common_debug_message1_common_debug_signal1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_common_debug_message1_common_debug_signal1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_common_debug_message1_common_debug_signal1_is_in_range(uint32_t value);

/**
 * Pack message COMMON_debugMessage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message2_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_common_debug_message2_t *src_p,
                                                   size_t size);

/**
 * Unpack message COMMON_debugMessage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message2_unpack(struct uwrt_mars_rover_can_common_debug_message2_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_common_debug_message2_common_debug_signal2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_common_debug_message2_common_debug_signal2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_common_debug_message2_common_debug_signal2_is_in_range(uint8_t value);

/**
 * Pack message COMMON_debugMessage3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message3_pack(uint8_t *dst_p,
                                                   const struct uwrt_mars_rover_can_common_debug_message3_t *src_p,
                                                   size_t size);

/**
 * Unpack message COMMON_debugMessage3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_common_debug_message3_unpack(struct uwrt_mars_rover_can_common_debug_message3_t *dst_p,
                                                     const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_common_debug_message3_common_debug_signal3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_common_debug_message3_common_debug_signal3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_common_debug_message3_common_debug_signal3_is_in_range(uint8_t value);

#ifdef __cplusplus
}
#endif

#endif
