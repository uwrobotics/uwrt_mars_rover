<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro">
  <xacro:macro name="load_model_data" params="physical_parameters_file">
    <!-- read .yaml files and load contents into xacro properties -->
    <xacro:property name="physical_parameters" value="${load_yaml(physical_parameters_file)}"/>

    <!--  extract data from yaml dictionaries  -->
    <xacro:property name="chassis_parameters" value="${physical_parameters['chassis']}"/>
    <xacro:property name="wheel_parameters" value="${physical_parameters['wheels']}"/>
    <xacro:property name="control_parameters" value="${physical_parameters['control']}"/>

    <!-- chassis parameters -->
    <xacro:property name="chassis_length" value="${chassis_parameters['length']}" scope="parent"/>
    <xacro:property name="chassis_width" value="${chassis_parameters['width']}" scope="parent"/>
    <xacro:property name="chassis_height" value="${chassis_parameters['height']}" scope="parent"/>
    <xacro:property name="chassis_mass" value="${chassis_parameters['mass']}" scope="parent"/>



    <!-- wheel parameters -->
    <xacro:property name="wheel_diameter" value="${wheel_parameters['diameter']}" scope="parent"/>
    <xacro:property name="wheel_width" value="${wheel_parameters['width']}" scope="parent"/>
    <xacro:property name="wheel_mass" value="${wheel_parameters['mass']}" scope="parent"/>
    <xacro:property name="wheel_radius" value="${(wheel_parameters['diameter'])/2}" scope="parent"/>

    


    <!-- control parameters -->
    <xacro:property name="mechanical_reduction" value="${control_parameters['mechanical_reduction']}" scope="parent"/>
    <xacro:property name="max_speed" value="${control_parameters['max_speed']}" scope="parent"/>
  </xacro:macro>

  <xacro:macro name="default_inertial" params="mass:=5">
    <inertial>
      <mass value="${mass}" />
      <inertia
          ixx="1e-3" ixy="0.0" ixz="0.0"
          iyy="1e-3" iyz="0.0"
          izz="1e-3"/>
      </inertial>
  </xacro:macro>

   <xacro:macro name="chassis_inertia" params="chassis_width:=^ chassis_height:=^ chassis_length:=^ chassis_mass:=^">
    <inertial>
      <mass value="${chassis_mass}" />
      <inertia
          ixx="${(1/12)*(((chassis_height)*(chassis_height))+((chassis_width)*(chassis_width)))}" ixy="0.0" ixz="0.0"
          iyy="${(1/12)*(((chassis_height)*(chassis_height))+((chassis_length)*(chassis_length)))}" iyz="0.0"
          izz="${(1/12)*(((chassis_width)*(chassis_width))+((chassis_length)*(chassis_length)))}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="wheel_intertia" params="wheel_radius:=^ wheel_width:=^ wheel_mass:=^">
    <inertial>
      <mass value="${wheel_mass}" />
      <inertia
          ixx="${(1/12)*(3*((wheel_radius)*(wheel_radius))+((wheel_width)*(wheel_width)))}" ixy="0.0" ixz="0.0"
          iyy="${(1/12)*(3*((wheel_radius)*(wheel_radius))+((wheel_width)*(wheel_width)))}" iyz="0.0"
          izz="${(1/2)*((wheel_radius)*(wheel_radius))}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="identical_visual_collision" params="**identical_blocks">
    <visual>
      <xacro:insert_block name="identical_blocks"/>
    </visual>
    <collision>
      <xacro:insert_block name="identical_blocks"/>
    </collision>
  </xacro:macro>
  <!-- macro for the wheel -->
  <xacro:macro name="wheel" params="prefix suffix parent_link reflect wheel_diameter:=^ wheel_width:=^ wheel_mass:=^ wheelbase_length:=^ x_position" >
    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="${parent_link}"/>
      <child link="${prefix}_${suffix}_wheel"/>
      <origin xyz="${x_position} ${wheelbase_length/2*reflect} 0" rpy="0 0 0"/>
    </joint>

    <link name="${prefix}_${suffix}_wheel">
      <xacro:identical_visual_collision>
        <idential_blocks>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder radius="${wheel_diameter/2}" length="${wheel_width}"/>
          </geometry>
        </idential_blocks>
      </xacro:identical_visual_collision>
      <xacro:wheel_intertia />
    </link>
  </xacro:macro>


  <!-- drivetrain macro only for the simulation stuff -->
  <xacro:macro name="drivetrain_actuator_gazebo" params="prefix suffix">
      <joint name="${prefix}_${suffix}_wheel_joint">
        <command_interface name="velocity">
          <param name="min">${-max_speed}</param>
          <param name="max">${max_speed}</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
  </xacro:macro>

  <!-- actual hardware -->
  <xacro:macro name="drivetrain_actuator" params="prefix suffix can_id">
    <!-- convert the can_id argument to an xacro property -->
    <xacro:property name="can_id_prop" value="${can_id}"/>
    <ros2_control name="${prefix}_${suffix}_wheel_actuator" type="actuator">
      <hardware>
        <plugin>uwrt_mars_rover_drivetrain_hw/UWRTMarsRoverDrivetrainHWActuatorInterface</plugin>
        <param name="can_id">${can_id_prop}</param>
        <!-- TODO: CAN interface?-->
      </hardware>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <command_interface name="velocity">
          <param name="min">${-max_speed}</param>
          <param name="max">${max_speed}</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <!-- <state_interface name="iq_current"/> -->
        <!-- TODO: acceleration, torque? -->
      </joint>
      <!-- <transmission name="transmission1"> -->
         <!-- TODO: These are not actually parsed by ros2control yet: https://github.com/ros-controls/ros2_control/issues/32, https://github.com/ros-controls/ros2_control/issues/599 -->
        <!-- <plugin>transmission_interface/SimpleTransmission</plugin> -->
        <!-- <joint name="${prefix}_${suffix}_wheel_joint" role="joint1"> -->
          <!-- <mechanical_reduction>${mechanical_reduction}</mechanical_reduction> -->
        <!-- </joint> -->
      <!-- </transmission> -->
    </ros2_control>
  </xacro:macro>

  <xacro:macro name="nav_imu">
    <link name="nav_imu_link">
      <visual>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
        <!-- <material name="cyan"> -->
        <!--   <color rgba"0 1.0 1.0 1.0"/> -->
        <!-- </material> -->
      </visual>

      <collision>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
      </collision>
      <xacro:default_inertial mass="0.001"/>
      <!-- <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/> -->
    </link> 

    <gazebo reference="nav_imu_link">
      <sensor name="nav_imu_sensor" type="imu">
       <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <ros>
            <!-- <namespace>/demo</namespace> -->
            <remapping>~/out:=imu/data</remapping>
          </ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <!-- <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev> -->
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <!-- <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev> -->
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <!-- <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev> -->
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <!-- <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev> -->
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <!-- <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev> -->
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <!-- <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev> -->
              </noise>
            </z>
          </linear_acceleration>
        </imu>
      </sensor>
    </gazebo>

    <joint name="nav_imu_joint" type="fixed">
      <parent link="base_link"/>
      <child link="nav_imu_link"/>
      <origin xyz ="0 0 0.01"/>
      <axis>
          <xyz>0 0 1</xyz>
      </axis>
    </joint> 

  </xacro:macro>

  <xacro:macro name="nav_gps">

    <link name="gps_link">
      <visual>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
        <!-- <material name="cyan"> -->
        <!--   <color rgba"0 1.0 1.0 1.0"/> -->
        <!-- </material> -->
      </visual>

      <collision>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
      </collision>
      <xacro:default_inertial mass="0.001"/>
      <!-- <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/> -->
    </link>

    <gazebo reference="gps_link">
        <sensor name="gps_sensor" type="gps">
            <plugin name="gps_plugin" filename="libgazebo_ros_gps_sensor.so">
                <ros>
                  <!-- <namespace>/demo</namespace> -->
                  <remapping>~/out:=gps/fix</remapping>
                </ros>
                <frame_name>gps_link</frame_name>
            </plugin>
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <gps>

              <longitude>
                  <mean>0.0</mean>
                  <stddev>0.01</stddev>
                  <!-- <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev> -->
              </longitude>

              <latitude>
                  <mean>0.0</mean>
                  <stddev>0.01</stddev>
                  <!-- <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev> -->
              </latitude>

            </gps>
        </sensor>
        <material>Gazebo/Grey</material> <!-- TODO: fix? -->
    </gazebo>

    <joint name="gps_joint" type="fixed">
      <parent link="base_link"/>
      <child link="gps_link"/>
      <origin xyz="0 0 0.01"/>
      <axis>
          <xyz>0 0 1</xyz>
        </axis>
    </joint>

  </xacro:macro>


</robot>
