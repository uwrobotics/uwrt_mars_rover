// AUTO-GENERATED FILE. DO NOT MODIFY. GENERATED BY scripts/generate_can_enums.py

#pragma once

namespace HWBRIDGE {

constexpr uint32_t ROVER_CANBUS_FREQUENCY_HZ = 1000000;
constexpr uint16_t ROVER_CANID_FILTER_MASK   = 0x7E0;  // Use bits 5:10 for addressing, bits 0:4 for message type

typedef double CANSignalValue_t;  // Generalize all signal values as double

typedef struct {
  uint8_t raw[8];
} CANMsgData_t;

enum class CANBUSID {
  CANBUS1,
  CANBUS2,
};

enum class CANFILTER {
  ARM_RX_FILTER     = 0x620,
  ARM_TX_FILTER     = 0x640,
  SCIENCE_RX_FILTER = 0x660,
  SCIENCE_TX_FILTER = 0x680,
  GIMBAL_RX_FILTER  = 0x6A0,
  GIMBAL_TX_FILTER  = 0x6C0,
  PDB_RX_FILTER     = 0x6E0,
  PDB_TX_FILTER     = 0x700,
  COMMON_FILTER     = 0x720,
  NO_MESSAGES       = 0x7E0,

};

enum class CANID {
  // Roboteq CAN IDs
  TPDO1         = 0x181,
  RPDO1         = 0x201,
  TPDO2         = 0x281,
  RPDO2         = 0x301,
  TPDO3         = 0x381,
  RPDO3         = 0x401,
  TPDO4         = 0x481,
  RPDO4         = 0x501,
  SDO_RESPONSE  = 0x581,
  SDO_CMD_QUERY = 0x601,

  // Rover boards CAN IDs
  ARM_SET_CONTROL_MODE               = 0x621,
  ARM_SET_JOINT_POSITION             = 0x622,
  ARM_SET_JOINT_ANGULAR_VELOCITY     = 0x623,
  ARM_SET_JOINT_CURRENT              = 0x624,
  ARM_SET_JOINT_PID_PARAMS           = 0x625,
  ARM_REPORT_JOINT_POSITION          = 0x640,
  ARM_REPORT_JOINT_ANGULAR_VELOCITY  = 0x641,
  ARM_REPORT_JOINT_CURRENT           = 0x642,
  ARM_REPORT_FAULTS                  = 0x643,
  ARM_REPORT_ACK                     = 0x644,
  ARM_REPORT_DIAGNOSTICS             = 0x645,
  ARM_SET_JOINT_SAFETY_CHECK         = 0x646,
  SCIENCE_SET_CONTROL_MODE           = 0x660,
  SCIENCE_SET_JOINT_POSITION         = 0x661,
  SCIENCE_SET_JOINT_ANGULAR_VELOCITY = 0x662,
  SCIENCE_SET_JOINT_PID_PARAMS       = 0x663,
  SCIENCE_REPORT_JOINT_DATA          = 0x680,
  SCIENCE_REPORT_SENSOR_DATA         = 0x681,
  SCIENCE_REPORT_FAULTS              = 0x682,
  SCIENCE_REPORT_ACK                 = 0x683,
  SCIENCE_REPORT_DIAGNOSTICS         = 0x684,
  GIMBAL_SET_CONTROL_MODE            = 0x6A0,
  GIMBAL_SET_JOINT_POSITION          = 0x6A1,
  GIMBAL_SET_JOINT_ANGULAR_VELOCITY  = 0x6A2,
  GIMBAL_SET_JOINT_PID_PARAMS        = 0x6A3,
  GIMBAL_REPORT_JOINT_DATA           = 0x6C0,
  GIMBAL_REPORT_FAULTS               = 0x6C1,
  GIMBAL_REPORT_ACK                  = 0x6C2,
  GIMBAL_REPORT_DIAGNOSTICS          = 0x6C3,
  PDB_SET_LED_MATRIX                 = 0x6E0,
  PDB_REPORT_SENSOR_DATA             = 0x700,
  PDB_REPORT_FAULTS                  = 0x701,
  PDB_REPORT_ACK                     = 0x702,
  PDB_REPORT_DIAGNOSTICS             = 0x703,
  COMMON_SWITCH_CAN_BUS              = 0x720,
  COMMON_DEBUG_MESSAGE1              = 0x721,
  COMMON_DEBUG_MESSAGE2              = 0x722,
  COMMON_DEBUG_MESSAGE3              = 0x723,

};

enum class CANSIGNAL {
  ARM_ACK,
  ARM_CLAW_CONTROL_MODE,
  ARM_CLAW_CURRENT_SENSOR_STATE,
  ARM_CLAW_ENCODER_STATE,
  ARM_ELBOW_CONTROL_MODE,
  ARM_ELBOW_CURRENT_SENSOR_STATE,
  ARM_ELBOW_ENCODER_STATE,
  ARM_JOINT_ANGULAR_VELOCITY_CHECK,
  ARM_JOINT_CURRENT_CHECK,
  ARM_JOINT_LIMIT_SWITCH_CHECK,
  ARM_JOINT_PIDID,
  ARM_JOINT_PID_DEADZONE,
  ARM_JOINT_PID_DERIVATIVE_GAIN,
  ARM_JOINT_PID_INTEGRAL_GAIN,
  ARM_JOINT_PID_PROPORTIONAL_GAIN,
  ARM_LEFT_WRIST_CONTROL_MODE,
  ARM_LEFT_WRIST_CURRENT_SENSOR_STATE,
  ARM_LEFT_WRIST_ENCODER_STATE,
  ARM_NUM_CANRX_FAULTS,
  ARM_NUM_CANTX_FAULTS,
  ARM_REPORT_CLAW_ANGULAR_VELOCITY,
  ARM_REPORT_CLAW_CURRENT,
  ARM_REPORT_CLAW_POSITION,
  ARM_REPORT_ELBOW_ANGULAR_VELOCITY,
  ARM_REPORT_ELBOW_CURRENT,
  ARM_REPORT_ELBOW_POSITION,
  ARM_REPORT_LEFT_WRIST_ANGULAR_VELOCITY,
  ARM_REPORT_LEFT_WRIST_CURRENT,
  ARM_REPORT_LEFT_WRIST_POSITION,
  ARM_REPORT_NUM_ONE_SHOT_MSGS_RECEIVED,
  ARM_REPORT_NUM_STREAMED_MSGS_RECEIVED,
  ARM_REPORT_RIGHT_WRIST_ANGULAR_VELOCITY,
  ARM_REPORT_RIGHT_WRIST_CURRENT,
  ARM_REPORT_RIGHT_WRIST_POSITION,
  ARM_REPORT_SHOULDER_ANGULAR_VELOCITY,
  ARM_REPORT_SHOULDER_CURRENT,
  ARM_REPORT_SHOULDER_POSITION,
  ARM_REPORT_TURNTABLE_ANGULAR_VELOCITY,
  ARM_REPORT_TURNTABLE_CURRENT,
  ARM_REPORT_TURNTABLE_POSITION,
  ARM_RIGHT_WRIST_CONTROL_MODE,
  ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE,
  ARM_RIGHT_WRIST_ENCODER_STATE,
  ARM_SAFETY_CHECK_JOINT_ID,
  ARM_SET_CLAW_ANGULAR_VELOCITY,
  ARM_SET_CLAW_CURRENT,
  ARM_SET_CLAW_POSITION,
  ARM_SET_ELBOW_ANGULAR_VELOCITY,
  ARM_SET_ELBOW_CURRENT,
  ARM_SET_ELBOW_POSITION,
  ARM_SET_LEFT_WRIST_ANGULAR_VELOCITY,
  ARM_SET_LEFT_WRIST_CURRENT,
  ARM_SET_LEFT_WRIST_POSITION,
  ARM_SET_RIGHT_WRIST_ANGULAR_VELOCITY,
  ARM_SET_RIGHT_WRIST_CURRENT,
  ARM_SET_RIGHT_WRIST_POSITION,
  ARM_SET_SHOULDER_ANGULAR_VELOCITY,
  ARM_SET_SHOULDER_CURRENT,
  ARM_SET_SHOULDER_POSITION,
  ARM_SET_TOOL_TIP_POSITION,
  ARM_SET_TURNTABLE_ANGULAR_VELOCITY,
  ARM_SET_TURNTABLE_CURRENT,
  ARM_SET_TURNTABLE_POSITION,
  ARM_SHOULDER_CONTROL_MODE,
  ARM_SHOULDER_CURRENT_SENSOR_STATE,
  ARM_SHOULDER_ENCODER_STATE,
  ARM_TURNTABLE_CONTROL_MODE,
  ARM_TURNTABLE_CURRENT_SENSOR_STATE,
  ARM_TURNTABLE_ENCODER_STATE,
  COMMON_CAN_BUS_ID,
  COMMON_DEBUG_SIGNAL1,
  COMMON_DEBUG_SIGNAL2,
  COMMON_DEBUG_SIGNAL3,
  GIMBAL_ACK,
  GIMBAL_JOINT_PIDID,
  GIMBAL_JOINT_PID_DEADZONE,
  GIMBAL_JOINT_PID_DERIVATIVE_GAIN,
  GIMBAL_JOINT_PID_INTEGRAL_GAIN,
  GIMBAL_JOINT_PID_PROPORTIONAL_GAIN,
  GIMBAL_NUM_CANRX_FAULTS,
  GIMBAL_NUM_CANTX_FAULTS,
  GIMBAL_PAN_CONTROL_MODE,
  GIMBAL_PAN_ENCODER_STATE,
  GIMBAL_REPORT_NUM_ONE_SHOT_MSGS_RECEIVED,
  GIMBAL_REPORT_NUM_STREAMED_MSGS_RECEIVED,
  GIMBAL_REPORT_PAN_ANGULAR_VELOCITY,
  GIMBAL_REPORT_PAN_POSITION,
  GIMBAL_SET_PAN_ANGULAR_VELOCITY,
  GIMBAL_SET_PAN_POSITION,
  GIMBAL_SET_PITCH_POSITION,
  GIMBAL_SET_ROLL_POSITION,
  PDB_17_V_RAIL_STATUS,
  PDB_5_V_RAIL_STATUS,
  PDB_ACK,
  PDB_ARM_POWER_STATUS,
  PDB_GIMBAL_POWER_STATUS,
  PDB_JETSON_STATUS,
  PDB_LED_MATRIX_STATE,
  PDB_NUM_CANRX_FAULTS,
  PDB_NUM_CANTX_FAULTS,
  PDB_REPORT_NUM_ONE_SHOT_MSGS_RECEIVED,
  PDB_REPORT_NUM_STREAMED_MSGS_RECEIVED,
  PDB_SCIENCE_POWER_STATUS,
  PDB_ULTRASONIC_SENSOR1_DATA,
  PDB_ULTRASONIC_SENSOR2_DATA,
  PDB_ULTRASONIC_SENSOR3_DATA,
  PDB_ULTRASONIC_SENSOR4_DATA,
  PDB_VBAT_RAIL_STATUS,
  SCIENCE_ACK,
  SCIENCE_ELEVATOR_CONTROL_MODE,
  SCIENCE_ELEVATOR_ENCODER_STATE,
  SCIENCE_GENEVA_CONTROL_MODE,
  SCIENCE_GENEVA_ENCODER_STATE,
  SCIENCE_JOINT_PIDID,
  SCIENCE_JOINT_PID_DEADZONE,
  SCIENCE_JOINT_PID_DERIVATIVE_GAIN,
  SCIENCE_JOINT_PID_INTEGRAL_GAIN,
  SCIENCE_JOINT_PID_PROPORTIONAL_GAIN,
  SCIENCE_MOISTURE_DATA,
  SCIENCE_MOISTURE_SENSOR_STATE,
  SCIENCE_NUM_CANRX_FAULTS,
  SCIENCE_NUM_CANTX_FAULTS,
  SCIENCE_REPORT_ELEVATOR_ANGULAR_VELOCITY,
  SCIENCE_REPORT_ELEVATOR_POSITION,
  SCIENCE_REPORT_GENEVA_ANGULAR_VELOCITY,
  SCIENCE_REPORT_GENEVA_POSITION,
  SCIENCE_REPORT_NUM_ONE_SHOT_MSGS_RECEIVED,
  SCIENCE_REPORT_NUM_STREAMED_MSGS_RECEIVED,
  SCIENCE_SET_COVER_POSITION,
  SCIENCE_SET_ELEVATOR_ANGULAR_VELOCITY,
  SCIENCE_SET_ELEVATOR_POSITION,
  SCIENCE_SET_GENEVA_ANGULAR_VELOCITY,
  SCIENCE_SET_GENEVA_POSITION,
  SCIENCE_SET_SHOVEL_POSITION,
  SCIENCE_TEMPERATURE_DATA,

};

enum class ARM_ACK_VALUES {
  ARM_RESET_ACK                = 0,
  ARM_SET_CONTROL_MODE_ACK     = 1,
  ARM_SET_JOINT_PID_PARAMS_ACK = 2,
  CAN_BUS_SWITCH_ACK           = 3,
  SNA                          = 255,

};

enum class ARM_CLAW_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_CLAW_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_CLAW_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_ELBOW_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_ELBOW_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_ELBOW_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_JOINT_ANGULAR_VELOCITY_CHECK_VALUES {
  CHECK_OFF = 0,
  CHECK_ON  = 1,

};

enum class ARM_JOINT_CURRENT_CHECK_VALUES {
  CHECK_OFF = 0,
  CHECK_ON  = 1,

};

enum class ARM_JOINT_LIMIT_SWITCH_CHECK_VALUES {
  CHECK_OFF = 0,
  CHECK_ON  = 1,

};

enum class ARM_JOINT_PIDID_VALUES {
  TURNTABLE   = 0,
  SHOULDER    = 1,
  ELBOW       = 2,
  LEFT_WRIST  = 3,
  RIGHT_WRIST = 4,
  CLAW        = 5,
  SNA         = 7,

};

enum class ARM_JOINT_PID_DEADZONE_VALUES {
  SNA = 8191,

};

enum class ARM_JOINT_PID_DERIVATIVE_GAIN_VALUES {
  SNA = 65535,

};

enum class ARM_JOINT_PID_INTEGRAL_GAIN_VALUES {
  SNA = 65535,

};

enum class ARM_JOINT_PID_PROPORTIONAL_GAIN_VALUES {
  SNA = 65535,

};

enum class ARM_LEFT_WRIST_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_LEFT_WRIST_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_REPORT_CLAW_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_CLAW_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_CLAW_POSITION_VALUES {
  SNA = 255,

};

enum class ARM_REPORT_ELBOW_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_ELBOW_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_ELBOW_POSITION_VALUES {
  SNA = 4095,

};

enum class ARM_REPORT_LEFT_WRIST_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_LEFT_WRIST_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_LEFT_WRIST_POSITION_VALUES {
  SNA = 255,

};

enum class ARM_REPORT_RIGHT_WRIST_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_RIGHT_WRIST_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_RIGHT_WRIST_POSITION_VALUES {
  SNA = 255,

};

enum class ARM_REPORT_SHOULDER_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_SHOULDER_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_SHOULDER_POSITION_VALUES {
  SNA = 4095,

};

enum class ARM_REPORT_TURNTABLE_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_TURNTABLE_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_REPORT_TURNTABLE_POSITION_VALUES {
  SNA = 4095,

};

enum class ARM_RIGHT_WRIST_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_RIGHT_WRIST_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_SAFETY_CHECK_JOINT_ID_VALUES {
  TURNTABLE   = 0,
  SHOULDER    = 1,
  ELBOW       = 2,
  LEFT_WRIST  = 3,
  RIGHT_WRIST = 4,
  CLAW        = 5,
  SNA         = 7,

};

enum class ARM_SET_CLAW_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_CLAW_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_CLAW_POSITION_VALUES {
  SNA = 127,

};

enum class ARM_SET_ELBOW_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_ELBOW_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_ELBOW_POSITION_VALUES {
  SNA = 1023,

};

enum class ARM_SET_LEFT_WRIST_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_LEFT_WRIST_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_LEFT_WRIST_POSITION_VALUES {
  SNA = 1023,

};

enum class ARM_SET_RIGHT_WRIST_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_RIGHT_WRIST_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_RIGHT_WRIST_POSITION_VALUES {
  SNA = 1023,

};

enum class ARM_SET_SHOULDER_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_SHOULDER_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_SHOULDER_POSITION_VALUES {
  SNA = 1023,

};

enum class ARM_SET_TOOL_TIP_POSITION_VALUES {
  SNA = 127,

};

enum class ARM_SET_TURNTABLE_ANGULAR_VELOCITY_VALUES {
  SNA = 1023,

};

enum class ARM_SET_TURNTABLE_CURRENT_VALUES {
  SNA = 1023,

};

enum class ARM_SET_TURNTABLE_POSITION_VALUES {
  SNA = 1023,

};

enum class ARM_SHOULDER_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_SHOULDER_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_SHOULDER_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_TURNTABLE_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  CURRENT   = 3,
  SNA       = 7,

};

enum class ARM_TURNTABLE_CURRENT_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class ARM_TURNTABLE_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class COMMON_CAN_BUS_ID_VALUES {
  CAN_BUS_1 = 0,
  CAN_BUS_2 = 1,
  SNA       = 3,

};

enum class COMMON_DEBUG_SIGNAL3_VALUES {
  DEBUG_VALUE_0 = 0,
  DEBUG_VALUE_1 = 1,
  DEBUG_VALUE_2 = 2,
  DEBUG_VALUE_3 = 3,
  DEBUG_VALUE_4 = 4,
  DEBUG_VALUE_5 = 5,
  DEBUG_VALUE_6 = 6,
  DEBUG_VALUE_7 = 7,
  SNA           = 255,

};

enum class GIMBAL_ACK_VALUES {
  GIMBAL_SET_CONTROL_MODE_ACK     = 0,
  GIMBAL_SET_JOINT_PID_PARAMS_ACK = 1,
  CAN_BUS_SWITCH_ACK              = 2,
  SNA                             = 255,

};

enum class GIMBAL_JOINT_PIDID_VALUES {
  PAN = 0,
  SNA = 7,

};

enum class GIMBAL_JOINT_PID_DEADZONE_VALUES {
  SNA = 8191,

};

enum class GIMBAL_JOINT_PID_DERIVATIVE_GAIN_VALUES {
  SNA = 65535,

};

enum class GIMBAL_JOINT_PID_INTEGRAL_GAIN_VALUES {
  SNA = 65535,

};

enum class GIMBAL_JOINT_PID_PROPORTIONAL_GAIN_VALUES {
  SNA = 65535,

};

enum class GIMBAL_PAN_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  SNA       = 3,

};

enum class GIMBAL_PAN_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class GIMBAL_REPORT_PAN_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class GIMBAL_REPORT_PAN_POSITION_VALUES {
  SNA = 32767,

};

enum class GIMBAL_SET_PAN_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class GIMBAL_SET_PAN_POSITION_VALUES {
  SNA = 32767,

};

enum class GIMBAL_SET_PITCH_POSITION_VALUES {
  SNA = 65535,

};

enum class GIMBAL_SET_ROLL_POSITION_VALUES {
  SNA = 65535,

};

enum class PDB_17_V_RAIL_STATUS_VALUES {
  OPERATIONAL  = 0,
  OVERVOLTAGE  = 1,
  UNDERVOLTAGE = 2,
  SNA          = 3,

};

enum class PDB_5_V_RAIL_STATUS_VALUES {
  OPERATIONAL  = 0,
  OVERVOLTAGE  = 1,
  UNDERVOLTAGE = 2,
  SNA          = 3,

};

enum class PDB_ACK_VALUES {
  PDB_SET_LED_MATRIX_ACK = 0,
  CAN_BUS_SWITCH_ACK     = 1,
  SNA                    = 255,

};

enum class PDB_ARM_POWER_STATUS_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class PDB_GIMBAL_POWER_STATUS_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class PDB_JETSON_STATUS_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class PDB_LED_MATRIX_STATE_VALUES {
  SOLID_RED      = 0,
  SOLID_BLUE     = 1,
  FLASHING_GREEN = 2,
  False          = 3,
  SNA            = 7,

};

enum class PDB_SCIENCE_POWER_STATUS_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class PDB_ULTRASONIC_SENSOR1_DATA_VALUES {
  SNA = 65535,

};

enum class PDB_ULTRASONIC_SENSOR2_DATA_VALUES {
  SNA = 65535,

};

enum class PDB_ULTRASONIC_SENSOR3_DATA_VALUES {
  SNA = 65535,

};

enum class PDB_ULTRASONIC_SENSOR4_DATA_VALUES {
  SNA = 65535,

};

enum class PDB_VBAT_RAIL_STATUS_VALUES {
  OPERATIONAL  = 0,
  OVERVOLTAGE  = 1,
  UNDERVOLTAGE = 2,
  SNA          = 3,

};

enum class SCIENCE_ACK_VALUES {
  SCIENCE_SET_CONTROL_MODE_ACK     = 0,
  SCIENCE_SET_JOINT_PID_PARAMS_ACK = 1,
  CAN_BUS_SWITCH_ACK               = 2,
  SNA                              = 255,

};

enum class SCIENCE_ELEVATOR_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  SNA       = 3,

};

enum class SCIENCE_ELEVATOR_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class SCIENCE_GENEVA_CONTROL_MODE_VALUES {
  OPEN_LOOP = 0,
  POSITION  = 1,
  VELOCITY  = 2,
  SNA       = 3,

};

enum class SCIENCE_GENEVA_ENCODER_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class SCIENCE_JOINT_PIDID_VALUES {
  GENEVA   = 0,
  ELEVATOR = 1,
  SNA      = 7,

};

enum class SCIENCE_JOINT_PID_DEADZONE_VALUES {
  SNA = 8191,

};

enum class SCIENCE_JOINT_PID_DERIVATIVE_GAIN_VALUES {
  SNA = 65535,

};

enum class SCIENCE_JOINT_PID_INTEGRAL_GAIN_VALUES {
  SNA = 65535,

};

enum class SCIENCE_JOINT_PID_PROPORTIONAL_GAIN_VALUES {
  SNA = 65535,

};

enum class SCIENCE_MOISTURE_DATA_VALUES {
  SNA = 65535,

};

enum class SCIENCE_MOISTURE_SENSOR_STATE_VALUES {
  OPERATIONAL = 0,
  FAULT       = 1,
  SNA         = 3,

};

enum class SCIENCE_REPORT_ELEVATOR_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class SCIENCE_REPORT_ELEVATOR_POSITION_VALUES {
  SNA = 32767,

};

enum class SCIENCE_REPORT_GENEVA_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class SCIENCE_REPORT_GENEVA_POSITION_VALUES {
  SNA = 32767,

};

enum class SCIENCE_SET_COVER_POSITION_VALUES {
  SNA = 65535,

};

enum class SCIENCE_SET_ELEVATOR_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class SCIENCE_SET_ELEVATOR_POSITION_VALUES {
  SNA = 32767,

};

enum class SCIENCE_SET_GENEVA_ANGULAR_VELOCITY_VALUES {
  SNA = 32767,

};

enum class SCIENCE_SET_GENEVA_POSITION_VALUES {
  SNA = 32767,

};

enum class SCIENCE_SET_SHOVEL_POSITION_VALUES {
  SNA = 65535,

};

enum class SCIENCE_TEMPERATURE_DATA_VALUES {
  SNA = 32767,

};

}  // namespace HWBRIDGE
